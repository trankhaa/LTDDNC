// File: backend/Services/Hosted/ExpiredAppointmentCleanerService.cs

using MongoDB.Driver;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Threading;
using System.Threading.Tasks;
using backend.Models.Entities.Booking;

namespace backend.Services.Hosted
{
    public class ExpiredAppointmentCleanerService : BackgroundService
    {
        private readonly ILogger<ExpiredAppointmentCleanerService> _logger;
        private readonly IServiceProvider _services;
        private readonly TimeSpan _period = TimeSpan.FromMinutes(10); // Ch·∫°y m·ªói ph√∫t

        public ExpiredAppointmentCleanerService(ILogger<ExpiredAppointmentCleanerService> logger, IServiceProvider services)
        { 
            _logger = logger;
            _services = services;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            // ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi ch·∫°y l·∫ßn ƒë·∫ßu ƒë·ªÉ ·ª©ng d·ª•ng kh·ªüi ƒë·ªông ho√†n to√†n
            await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);
            
            using var timer = new PeriodicTimer(_period);
            while (!stoppingToken.IsCancellationRequested && await timer.WaitForNextTickAsync(stoppingToken))
            {
                _logger.LogInformation("üöÄ [Background Service] B·∫Øt ƒë·∫ßu qu√©t c√°c l·ªãch h·∫πn qu√° h·∫°n...");

                try
                {
                    // T·∫°o m·ªôt scope m·ªõi ƒë·ªÉ l·∫•y d·ªãch v·ª• (quan tr·ªçng!)
                    await using (var scope = _services.CreateAsyncScope())
                    {
                        var appointmentCollection = scope.ServiceProvider.GetRequiredService<IMongoCollection<ConfirmAppointment>>();

                        // Th·ªùi gian h·∫øt h·∫°n (v√≠ d·ª•: c√°c l·ªãch h·∫πn t·∫°o tr∆∞·ªõc 2 ph√∫t)
                        var expirationTime = DateTime.UtcNow.AddMinutes(-2);

                        var filter = Builders<ConfirmAppointment>.Filter.And(
                            Builders<ConfirmAppointment>.Filter.Eq(a => a.Status, PaymentStatus.PENDING_PAYMENT),
                            Builders<ConfirmAppointment>.Filter.Lt(a => a.CreatedAt, expirationTime)
                        );

                        var deleteResult = await appointmentCollection.DeleteManyAsync(filter, stoppingToken);

                        if (deleteResult.DeletedCount > 0)
                        {
                            _logger.LogInformation($"‚úÖ [Background Service] ƒê√£ x√≥a {deleteResult.DeletedCount} l·ªãch h·∫πn qu√° h·∫°n.");
                        }
                        else
                        {
                            _logger.LogInformation("‚ÑπÔ∏è [Background Service] Kh√¥ng c√≥ l·ªãch h·∫πn n√†o qu√° h·∫°n.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "‚ùå [Background Service] G·∫∑p l·ªói khi ƒëang d·ªçn d·∫πp l·ªãch h·∫πn.");
                }
            }
        }
    }
}