// File: backend/Controllers/API/BookingController/PaymentController.cs

using Microsoft.AspNetCore.Mvc;
using backend.Services;
using backend.Models.Entities.Booking;
using System.Threading.Tasks;
using Net.payOS;
using Net.payOS.Types; // Quan tr·ªçng: using ƒë√∫ng namespace c·ªßa th∆∞ vi·ªán

[Route("api/[controller]")]
[ApiController]
public class PaymentController : ControllerBase
{
    private readonly PayOS _payOS;
    private readonly ConfirmAppointmentService _confirmAppointmentService;

    public PaymentController(PayOS payOS, ConfirmAppointmentService confirmAppointmentService)
    {
        _payOS = payOS;
        _confirmAppointmentService = confirmAppointmentService;
    }

    [HttpPost("payos-webhook-handler")]
    public async Task<IActionResult> HandleWebhook([FromBody] WebhookType webhookBody)
    {
        Console.WriteLine($"üîî WEBHOOK RECEIVED at {DateTime.UtcNow}");
        Console.WriteLine($"üì¶ Webhook Data: {System.Text.Json.JsonSerializer.Serialize(webhookBody)}");

        try
        {
            // X√°c th·ª±c webhook data
            WebhookData verifiedWebhookData = _payOS.verifyPaymentWebhookData(webhookBody);
            Console.WriteLine($"‚úÖ Webhook verified for OrderCode: {verifiedWebhookData.orderCode}");

            // L·∫•y th√¥ng tin chi ti·∫øt t·ª´ PayOS
            PaymentLinkInformation paymentInfo = await _payOS.getPaymentLinkInformation(verifiedWebhookData.orderCode);
            Console.WriteLine($"üí∞ Payment Status from PayOS: {paymentInfo.status}");

            if (paymentInfo.status == "PAID")
            {
                Console.WriteLine($"üîÑ Updating appointment status for OrderCode: {paymentInfo.orderCode}");

                bool updated = await _confirmAppointmentService.UpdateAppointmentStatusByOrderCodeAsync(
                    paymentInfo.orderCode,
                    PaymentStatus.PAID
                );

                if (updated)
                {
                    Console.WriteLine($"‚úÖ WEBHOOK SUCCESS: Order {paymentInfo.orderCode} has been updated to PAID.");
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è WEBHOOK WARNING: Order {paymentInfo.orderCode} was not updated (maybe already paid or not found).");
                }
            }
            else
            {
                Console.WriteLine($"‚ÑπÔ∏è WEBHOOK INFO: Order {paymentInfo.orderCode} has status {paymentInfo.status}, no action needed.");
            }

            return Ok(new { error = 0, message = "Success" });
        }
        catch (Exception e)
        {
            Console.WriteLine($"‚ùå WEBHOOK ERROR: {e.Message}");
            Console.WriteLine($"üîç Stack Trace: {e.StackTrace}");

            // V·∫´n tr·∫£ v·ªÅ success ƒë·ªÉ PayOS kh√¥ng retry
            return Ok(new { error = -1, message = "Webhook processing failed", data = e.Message });
        }
    }

    [HttpPost("manual-update-status/{orderCode}")]
    public async Task<IActionResult> ManualUpdatePaymentStatus(long orderCode, [FromQuery] string status = "PAID")
    {
        try
        {
            // Ki·ªÉm tra tr·∫°ng th√°i th·ª±c t·∫ø t·ª´ PayOS
            PaymentLinkInformation paymentInfo = await _payOS.getPaymentLinkInformation(orderCode);

            Console.WriteLine($"üîç PayOS Status for Order {orderCode}: {paymentInfo.status}");

            if (paymentInfo.status == "PAID")
            {
                // C·∫≠p nh·∫≠t database
                bool updated = await _confirmAppointmentService.UpdateAppointmentStatusByOrderCodeAsync(orderCode, PaymentStatus.PAID);

                if (updated)
                {
                    return Ok(new
                    {
                        message = "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
                        orderCode = orderCode,
                        newStatus = PaymentStatus.PAID,
                        payOsStatus = paymentInfo.status
                    });
                }
                else
                {
                    return NotFound(new { message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t" });
                }
            }
            else
            {
                return BadRequest(new
                {
                    message = "ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n tr√™n PayOS",
                    currentStatus = paymentInfo.status
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error: {ex.Message}");
            return StatusCode(500, new { message = "L·ªói h·ªá th·ªëng", error = ex.Message });
        }
    }

    [HttpGet("check-payos-status/{orderCode}")]
    public async Task<IActionResult> CheckPayOSStatus(long orderCode)
    {
        try
        {
            PaymentLinkInformation paymentInfo = await _payOS.getPaymentLinkInformation(orderCode);

            return Ok(new
            {
                orderCode = orderCode,
                payOsStatus = paymentInfo.status,
                amount = paymentInfo.amount,
                // ‚úÖ FIXED: X√≥a thu·ªôc t√≠nh 'description' kh√¥ng t·ªìn t·∫°i
                createdAt = paymentInfo.createdAt,
                transactions = paymentInfo.transactions
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { message = "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i t·ª´ PayOS", error = ex.Message });
        }
    }
}