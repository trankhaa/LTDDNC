import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:intl/intl.dart';

// ‚úÖ B∆Ø·ªöC 1: IMPORT C√ÅC SERVICE C·∫¶N THI·∫æT
// ƒê·∫£m b·∫£o c√°c ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c v·ªõi c·∫•u tr√∫c d·ª± √°n c·ªßa b·∫°n
import 'navigation_service.dart';
import 'database_service.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  /// Kh·ªüi t·∫°o d·ªãch v·ª• th√¥ng b√°o, c·∫•u h√¨nh, v√† xin quy·ªÅn.
  static Future<void> initialize() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
          requestAlertPermission: true,
          requestBadgePermission: true,
          requestSoundPermission: true,
        );

    const InitializationSettings initializationSettings =
        InitializationSettings(
          android: initializationSettingsAndroid,
          iOS: initializationSettingsIOS,
        );

    await _notificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );

    await _configureLocalTimeZone();
    await _createNotificationChannels();
    await requestPermissions();
  }

  /// H√†m callback ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n v√†o m·ªôt th√¥ng b√°o c·ªßa h·ªá th·ªëng.
  static void _onNotificationTap(NotificationResponse notificationResponse) {
    debugPrint(
      'Notification tapped with payload: ${notificationResponse.payload}',
    );
    final NavigatorState? navigator =
        NavigationService.navigatorKey.currentState;

    if (navigator != null) {
      final String? payload = notificationResponse.payload;

      if (payload == 'navigate_to_thong_bao') {
        navigator.pushNamedAndRemoveUntil(
          '/nav',
          (route) => false,
          arguments: 2,
        );
      } else if (payload == 'navigate_to_phieu_kham') {
        navigator.pushNamedAndRemoveUntil(
          '/nav',
          (route) => false,
          arguments: 1,
        );
      } else if (payload != null &&
          payload.startsWith('appointment_reminder_')) {
        try {
          final String appointmentId = payload.split('_').last;
          debugPrint(
            'Navigating to appointment details for ID: $appointmentId',
          );
          navigator.pushNamedAndRemoveUntil(
            '/nav',
            (route) => false,
            arguments: 1,
          );
          // V√≠ d·ª•: navigator.push(MaterialPageRoute(builder: (_) => AppointmentDetailsPage(id: appointmentId)));
        } catch (e) {
          debugPrint('Error parsing appointment ID from payload: $e');
        }
      }
    }
  }

  static Future<void> _configureLocalTimeZone() async {
    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));
    debugPrint('‚úÖ Timezone configured: Asia/Ho_Chi_Minh');
  }

  static Future<void> _createNotificationChannels() async {
    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
        _notificationsPlugin
            .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin
            >();

    if (androidImplementation != null) {
      const AndroidNotificationChannel immediateChannel =
          AndroidNotificationChannel(
            'immediate_channel_id',
            'Th√¥ng b√°o t·ª©c th√¨',
            description: 'K√™nh cho c√°c th√¥ng b√°o quan tr·ªçng t·ª©c th·ªùi.',
            importance: Importance.max,
          );
      await androidImplementation.createNotificationChannel(immediateChannel);

      const AndroidNotificationChannel scheduledChannel =
          AndroidNotificationChannel(
            'scheduled_channel_id',
            'Nh·∫Øc nh·ªü & L·ªãch h·∫πn',
            description: 'K√™nh cho c√°c th√¥ng b√°o nh·∫Øc nh·ªü ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch.',
            importance: Importance.max,
          );
      await androidImplementation.createNotificationChannel(scheduledChannel);
      debugPrint('‚úÖ Notification channels created');
    }
  }

  static Future<void> requestPermissions() async {
    await Permission.notification.request();
    if (defaultTargetPlatform == TargetPlatform.android) {
      await Permission.scheduleExactAlarm.request();
    }
  }

  /// Hi·ªÉn th·ªã m·ªôt th√¥ng b√°o ngay l·∫≠p t·ª©c V√Ä l∆∞u n√≥ v√†o database.
  static Future<void> showImmediateNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
  }) async {
    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'immediate_channel_id',
        'Th√¥ng b√°o t·ª©c th√¨',
        importance: Importance.max,
        priority: Priority.high,
      ),
      iOS: DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      ),
    );

    // 1. Hi·ªÉn th·ªã th√¥ng b√°o h·ªá th·ªëng
    await _notificationsPlugin.show(
      id,
      title,
      body,
      notificationDetails,
      payload: payload,
    );

    // 2. T·∫°o m·ªôt b·∫£n ghi th√¥ng b√°o v√† l∆∞u v√†o database c·ª•c b·ªô
    final notificationToSave = AppNotification(
      // id kh√¥ng c·∫ßn thi·∫øt khi insert v√¨ n√≥ l√† AUTOINCREMENT
      title: title,
      body: body,
      payload: payload ?? '',
      receivedAt: DateTime.now().toIso8601String(), // L∆∞u th·ªùi ƒëi·ªÉm nh·∫≠n
      isRead: 0, // M·∫∑c ƒë·ªãnh l√† ch∆∞a ƒë·ªçc
    );
    await DatabaseService.instance.insertNotification(notificationToSave);

    debugPrint(
      '‚úÖ Shown and SAVED immediate notification ID $id with payload: $payload',
    );
  }

  /// L√™n l·ªãch cho m·ªôt th√¥ng b√°o trong t∆∞∆°ng lai V√Ä l∆∞u n√≥ v√†o database.
  static Future<void> scheduleAppointmentReminder({
    required int id, // ƒê√¢y l√† ID c·ªßa l·ªãch h·∫πn, d√πng ƒë·ªÉ qu·∫£n l√Ω
    required String doctorName,
    required DateTime appointmentDate,
    required String appointmentSlot,
    int hoursBefore = 8,
  }) async {
    try {
      final startTimeString = appointmentSlot.split('-')[0].trim();
      final timeParts = startTimeString.split(':');
      final hour = int.parse(timeParts[0]);
      final minute = int.parse(timeParts[1]);

      final appointmentDateTime = DateTime(
        appointmentDate.year,
        appointmentDate.month,
        appointmentDate.day,
        hour,
        minute,
      );

      final scheduledTime = appointmentDateTime.subtract(
        Duration(hours: hoursBefore),
      );

      if (scheduledTime.isBefore(DateTime.now())) {
        debugPrint(
          '‚ö†Ô∏è Scheduled time is in the past. Not scheduling notification ID $id.',
        );
        return;
      }

      final tzScheduledTime = tz.TZDateTime.from(scheduledTime, tz.local);

      final String title = 'üè• Nh·∫Øc nh·ªü l·ªãch h·∫πn';
      final String body =
          'B·∫°n c√≥ l·ªãch h·∫πn v·ªõi B√°c sƒ© $doctorName v√†o l√∫c $appointmentSlot, ${_formatDate(appointmentDate)}';
      final String payload = 'appointment_reminder_$id';

      // 1. L√™n l·ªãch th√¥ng b√°o h·ªá th·ªëng
      await _notificationsPlugin.zonedSchedule(
        id,
        title,
        body,
        tzScheduledTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'scheduled_channel_id',
            'Nh·∫Øc nh·ªü & L·ªãch h·∫πn',
            importance: Importance.max,
            priority: Priority.high,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: payload,
      );

      // 2. T·∫°o m·ªôt b·∫£n ghi th√¥ng b√°o v√† l∆∞u v√†o database c·ª•c b·ªô
      final notificationToSave = AppNotification(
        title: title,
        body: body,
        payload: payload,
        receivedAt:
            DateTime.now().toIso8601String(), // L∆∞u th·ªùi ƒëi·ªÉm n√≥ ƒë∆∞·ª£c L√äN L·ªäCH
        isRead: 0, // M·∫∑c ƒë·ªãnh l√† ch∆∞a ƒë·ªçc
      );
      await DatabaseService.instance.insertNotification(notificationToSave);

      debugPrint(
        '‚úÖ Scheduled and SAVED notification ID $id for: ${_formatDateTime(scheduledTime)}',
      );
    } catch (e) {
      debugPrint('‚ùå Error scheduling and saving notification ID $id: $e');
    }
  }

  static String _formatDate(DateTime date) =>
      DateFormat('dd/MM/yyyy').format(date);
  static String _formatDateTime(DateTime dateTime) =>
      DateFormat('HH:mm - dd/MM/yyyy').format(dateTime);

  /// H·ªßy m·ªôt th√¥ng b√°o h·ªá th·ªëng ƒë√£ l√™n l·ªãch.
  /// L∆∞u √Ω: H√†nh ƒë·ªông n√†y KH√îNG x√≥a th√¥ng b√°o kh·ªèi database.
  /// B·∫°n s·∫Ω c·∫ßn m·ªôt logic ri√™ng ƒë·ªÉ x√≥a n√≥ kh·ªèi `ThongBaoPage` n·∫øu c·∫ßn.
  static Future<void> cancelNotification(int id) async {
    await _notificationsPlugin.cancel(id);
    debugPrint('‚ÑπÔ∏è Cancelled scheduled system notification ID $id');
  }

  static Future<void> cancelAllNotifications() async {
    await _notificationsPlugin.cancelAll();
    debugPrint('‚ÑπÔ∏è Cancelled all scheduled system notifications');
  }
}
